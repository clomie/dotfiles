function ghq-new() {
    local REPONAME=$1

    if [ -z "$REPONAME" ]; then
        echo 'Repository name must be specified.'
        return
    fi

    local TMPDIR=/tmp/ghq_new
    local TMPREPODIR=$TMPDIR/$REPONAME

    mkdir -p $TMPREPODIR
    cd $TMPREPODIR

    hub init
    hub create -p

    local REPOPATH=$(git remote get-url origin | perl -pe 's|^https://||; s|ssh://git@||; s|^git@(.+):(.+/.+)|$1/$2|; s|\.git$||')
    local USER_REPO_NAME=$(echo $REPOPATH | perl -pe 's|^.+?/||')

    ghq get -p $USER_REPO_NAME

    cd $(ghq root)/$REPOPATH

    rm -rf $TMPREPODIR
}

function ghq-get() {
    local url=$(hub api 'user/repos?per_page=100&affiliation=organization_member' | jq -r 'map(select(.archived != true)) | .[].full_name' | fzf)
    [[ -z $url ]] && return 1
    ghq get -p $url
}

function fpod() {
    local row=$(kubectl get pods --all-namespaces --no-headers | fzf)
    if [[ "-n" = "$1" ]]; then
      echo ${row} | awk '{print $1 " " $2}'
    else
      echo ${row} | awk '{print $2}'
    fi
}

function kush() {
    local shell=${1:-"bash"}
    local pod=($(fpod -n))
    [[ -z $pod ]] && return 1
    local container=$(kubectl get pods/${pod[2]} -n ${pod[1]} -o jsonpath="{.spec.containers[*].name}" | tr -s '[[:space:]]' '\n' | fzf --select-1 --exit-0)
    [[ -z $container ]] && return 1
    echo kubectl exec -n ${pod[1]} -it ${pod[2]} -c $container $shell 1>&2
    kubectl exec -n ${pod[1]} -it ${pod[2]} -c $container $shell
}

function klog() {
    local pod=($(fpod -n))
    [[ -z $pod ]] && return 1
    local container=$(kubectl get pods/${pod[2]} -n ${pod[1]} -o jsonpath="{.spec.containers[*].name}" | tr -s '[[:space:]]' '\n' | fzf --select-1 --exit-0)
    [[ -z $container ]] && return 1
    echo kubectl logs ${@} -n ${pod[1]} ${pod[2]} -c $container 1>&2
    kubectl logs ${@} -n ${pod[1]} ${pod[2]} -c $container
}

function fcon() {
    docker container ls $@ --format "table {{.ID}}\t{{.Image}}\t{{.Command}}\t{{.Names}}" | tail -n +2 | fzf | awk '{print $1}' 
}

function selcon() {
    docker container ls $@ --format "table {{.ID}}\t{{.Image}}\t{{.Command}}\t{{.Names}}" | tail -n +2 | fzf --multi | awk '{print $1}' 
} 

function dosh() {
    local container=$(fcon)
    [[ -z $container ]] && return 1
    docker exec -it $container /bin/bash
}

function sdkuse() {
    local candidate=$1
    if [[ -z $candidate ]]; then
        candidate=$(/bin/ls -1 ~/.sdkman/candidates | fzf)
    fi
    local version=$(/bin/ls -1 ~/.sdkman/candidates/$candidate | grep -v current | fzf)
    sdk use $candidate $version
}
